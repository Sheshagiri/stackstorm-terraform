---
version: '2.0'

terraform.pipeline:
  description: "A workflow that can be used as a pipeline for Terraform execution"

  input:
    - backend
    - plan_path
    - terraform_exec
    - workspace
    - variable_dict
    - variable_files
    - destroy

  tasks:
    init:
      action: terraform.init

      input:
        backend: <% $.backend %>
        plan_path: <% $.plan_path %>
        terraform_exec: <% $.terraform_exec %>

      on-success:
        - select_workspace
      on-error:
        - fail

    select_workspace:
      action: terraform.select_workspace

      input:
        plan_path: <% $.plan_path %>
        terraform_exec: <% $.terraform_exec %>
        workspace: <% $.workspace %>

      on-success:
        - plan
      on-error:
        - create_workspace

    create_workspace:
      action: terraform.create_workspace

      input:
        plan_path: <% $.plan_path %>
        terraform_exec: <% $.terraform_exec %>
        workspace: <% $.workspace %>

      on-success:
        - plan
      on-error:
        - fail

    plan:
      action: terraform.plan

      input:
        plan_path: <% $.plan_path %>
        terraform_exec: <% $.terraform_exec %>
        variable_dict: <% $.variable_dict %>
        variable_files: <% $.variable_files %>

      on-success:
        - apply: <% not $.destroy %>
        - destroy: <% $.destroy %>
      on-error:
        - fail

    apply:
      action: terraform.apply

      input:
        plan_path: <% $.plan_path %>
        terraform_exec: <% $.terraform_exec %>
        variable_dict: <% $.variable_dict %>
        variable_files: <% $.variable_files %>
      on-error:
        - fail

    destroy:
      action: terraform.destroy

      input:
        plan_path: <% $.plan_path %>
        terraform_exec: <% $.terraform_exec %>
        variable_dict: <% $.variable_dict %>
        variable_files: <% $.variable_files %>
      on-error:
        - fail
